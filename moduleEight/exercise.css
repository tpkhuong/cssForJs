/* dialog layout */

.dialog-wrapper {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: hsl(0deg 0% 0% / 0.75);
}

.dialog-content {
  width: 600px;
  max-width: 100%;
  height: 400px;
  background: white;
  border-radius: 6px;
  transform: scale(0.85);
  margin-inline: auto;
}

.close-btn {
  padding: 16px;
  background: transparent;
  border: none;
  font-weight: bold;
  transform: translate(545px, -45px);
}

/* josh's solution */

.dialog-wrapper {
  display: grid;
  place-content: center;
}
.dialog-content {
  position: relative;
}
.close-btn {
  position: absolute;
  top: 0;
  right: 0;
  transform: translateY(-100%);
}

/* translated cards */

.wrapper {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 8px;
  padding: 16px;
}
.card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 200px;
  background: white;
  border-radius: 8px;
  border: 2px solid hsl(240deg 100% 75%);
  transition: transform 1s;
}

.card-link:hover .card,
.card-link:focus .card {
  /* only the child .card is lift up instead of the <a> tag .card-link */
  transform: translateY(-16px);
}

.card img {
  width: 64px;
  height: 64px;
}

/* josh's solution */

.card {
  transition: transform 250ms;
}
.card-link:hover .card {
  transform: translateY(-16px);
}

/* photo zoom */

.wrapper {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 8px;
}
.thumbnail {
  display: block;
  width: 100%;
}

.thumbnail-wrapper img {
  transition: transform 1s;
}
.thumbnail-wrapper:hover img {
  /* make img bigger on hover of <a> */
  transform: scale(1.2);
}

.thumbnail-wrapper {
  /* img doesnt bleed out of parent container */
  overflow: hidden;
}

/* josh's solution */

.thumbnail {
  transition: transform 500ms;
}
.thumbnail-wrapper {
  overflow: hidden;
}
.thumbnail-wrapper:hover .thumbnail {
  transform: scale(1.2);
}

/* Pop-Up Help Circle */

.help-circle {
  /* using position: absolute instead of position:fixed we will get the scroll bar on the right  */
  position: absolute;
  /* bottom: -62px to hide button */
  /* bottom: -62px; */
  /* bottom: 32px to show button */
  bottom: 32px;
  right: 32px;
  /* use transition to show */
  transform: translateY(92px);
  animation: slideUp 500ms linear backwards;
  animation-delay: 1000ms;
}

@keyframes slideUp {
  0% {
    display: none;
  }

  100% {
    display: revert;
    transform: translateY(0px);
  }
}

/* josh's solution */

/* any css variables defined in @keyframes animation is inherited from the place that the animation is used. */
@keyframes slide-in {
  from {
    transform: translateY(calc(100% + var(--spacing)));
  }
  to {
    transform: translateY(0%);
  }
}

/* continue from above comments. when we set animation slide-in in .help-circle any variables available to .help-circle or a parent selector
will become available to the keyframe animation
*/
.help-circle {
  --spacing: 32px;
  position: fixed;
  bottom: var(--spacing);
  right: var(--spacing);
  animation: slide-in 500ms backwards;
  animation-delay: 1000ms;
}

/* Waving Hand */

@keyframes wave-hand {
  0% {
    transform: rotate(0deg);
  }
  100% {
    /* play around with the deg */
    transform: rotate(45deg);
  }
}

.waving-hand {
  transform-origin: bottom right;
  animation: wave-hand 1000ms infinite alternate;
  /* animation-delay: 500ms; */
}

/* apply this to span choose between inline-block and block */
.wave {
  display: inline-block;
  display: block;
  /* selecting the element will help us see the transform-origin */
  transform-origin: bottom right;
  /* increase duration to make waving motion slower */
  animation: wave-hand 1000ms infinite alternate;
}

/* span element is inline when we changed display to inline-block or block our animation worked
we didnt have to apply our declarations to <p> element which is the parent wrapper of <span>
*/

/* josh's solution */

@keyframes wave {
  from {
    transform: rotate(-10deg);
  }
  to {
    transform: rotate(30deg);
  }
}
.wave {
  display: inline-block;
  animation: wave 1000ms infinite alternate ease-in-out;
  transform-origin: 75% 80%;
}
