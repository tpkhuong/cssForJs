/* reset */

* {
  box-sizing: border-box;
  font-family: sans-serif;
}

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* reset */

.wrapper {
  display: flex;
  align-items: baseline;
  gap: 32px;
  padding: 32px 0;
}

/* desktop-first */
.sidebar {
  display: revert;
  flex: 1;
  max-width: 350px;
  background: white;
  padding: 24px 32px;
  border-radius: 0 16px 16px 0;
}

@media screen and (max-width: 700px) {
  .sidebar {
    display: none;
    /* flex: 1;
    max-width: 350px;
    background: white;
    padding: 24px 32px;
    border-radius: 0 16px 16px 0; */
  }
  .wrapper {
    padding: 32px;
  }
  main {
    border-radius: 16px;
  }
}

/* desktop-first */

/* mobile-first */

.wrapper {
  display: flex;
  align-items: baseline;
  gap: 32px;
  padding: 32px;
}

@media screen and (min-width: 700px) {
  .wrapper {
    padding: 32px 0;
  }
}

.sidebar {
  display: none;
  flex: 1;
  max-width: 350px;
  background: white;
  padding: 24px 32px;
  border-radius: 0 16px 16px 0;
}

main {
  flex: 3;
  background: white;
  padding: 24px 32px 32px;
  border-radius: 16px;
}
@media screen and (min-width: 700px) {
  .sidebar {
    display: revert;
  }
  main {
    border-radius: 16px 0 0 16px;
  }
}
/* Decorative styles */
.sidebar h2 {
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  color: hsl(0deg 0% 30%);
}
main section:not(:last-of-type) {
  margin: 32px 0;
}
body {
  margin: 0;
  padding: 0;
}
ul {
  padding: 0;
}

/* stacked cards */

main {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* order of CSS variable is important too. when we had var(--phone-spacer, var(--tablet-spacer, 8px)) code didn't work.
  reason code didn't work because when screen is at 350px --phone-spacer is declared with CSS variables/properties once a variable is declared
  it will not go to the fallback. 
  the way we have below where --tablet-spacer won't be declared until the screen is at 500px. 
  */
  gap: var(--tablet-spacer, var(--phone-spacer, 8px));
  padding: var(--tablet-spacer, var(--phone-spacer, 8px));
}
article {
  border-radius: var(--tablet-spacer, var(--phone-spacer, 8px));
  padding: var(--tablet-spacer, var(--phone-spacer, 8px));
}

@media (min-width: 350px) {
  main {
    --phone-spacer: 16px;
  }
  /* article {
    border-radius: 16px;
    padding: 16px;
  } */
}

@media (min-width: 500px) {
  main {
    --tablet-spacer: 32px;
  }
  /* article {
    border-radius: 32px;
    padding: 32px;
  } */
}

/* josh's solution */

main {
  --spacing: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing);
  padding: var(--spacing);
}
article {
  border-radius: var(--spacing);
  padding: var(--spacing);
}

@media (min-width: 350px) {
  main {
    --spacing: 16px;
  }
}

@media (min-width: 500px) {
  main {
    --spacing: 32px;
  }
}

/* josh's solution */

/* stacked cards */
