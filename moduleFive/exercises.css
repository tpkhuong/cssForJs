/* reset */

* {
  box-sizing: border-box;
  font-family: sans-serif;
}

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* reset */

.wrapper {
  display: flex;
  align-items: baseline;
  gap: 32px;
  padding: 32px 0;
}

/* desktop-first */
.sidebar {
  display: revert;
  flex: 1;
  max-width: 350px;
  background: white;
  padding: 24px 32px;
  border-radius: 0 16px 16px 0;
}

@media screen and (max-width: 700px) {
  .sidebar {
    display: none;
    /* flex: 1;
    max-width: 350px;
    background: white;
    padding: 24px 32px;
    border-radius: 0 16px 16px 0; */
  }
  .wrapper {
    padding: 32px;
  }
  main {
    border-radius: 16px;
  }
}

/* desktop-first */

/* mobile-first */

.wrapper {
  display: flex;
  align-items: baseline;
  gap: 32px;
  padding: 32px;
}

@media screen and (min-width: 700px) {
  .wrapper {
    padding: 32px 0;
  }
}

.sidebar {
  display: none;
  flex: 1;
  max-width: 350px;
  background: white;
  padding: 24px 32px;
  border-radius: 0 16px 16px 0;
}

main {
  flex: 3;
  background: white;
  padding: 24px 32px 32px;
  border-radius: 16px;
}
@media screen and (min-width: 700px) {
  .sidebar {
    display: revert;
  }
  main {
    border-radius: 16px 0 0 16px;
  }
}
/* Decorative styles */
.sidebar h2 {
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  color: hsl(0deg 0% 30%);
}
main section:not(:last-of-type) {
  margin: 32px 0;
}
body {
  margin: 0;
  padding: 0;
}
ul {
  padding: 0;
}

/* stacked cards */

main {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* order of CSS variable is important too. when we had var(--phone-spacer, var(--tablet-spacer, 8px)) code didn't work.
  reason code didn't work because when screen is at 350px --phone-spacer is declared with CSS variables/properties once a variable is declared
  it will not go to the fallback. 
  the way we have below where --tablet-spacer won't be declared until the screen is at 500px. 
  */
  gap: var(--tablet-spacer, var(--phone-spacer, 8px));
  padding: var(--tablet-spacer, var(--phone-spacer, 8px));
}
article {
  border-radius: var(--tablet-spacer, var(--phone-spacer, 8px));
  padding: var(--tablet-spacer, var(--phone-spacer, 8px));
}

@media (min-width: 350px) {
  main {
    --phone-spacer: 16px;
  }
  /* article {
    border-radius: 16px;
    padding: 16px;
  } */
}

@media (min-width: 500px) {
  main {
    --tablet-spacer: 32px;
  }
  /* article {
    border-radius: 32px;
    padding: 32px;
  } */
}

/* josh's solution */

main {
  --spacing: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing);
  padding: var(--spacing);
}
article {
  border-radius: var(--spacing);
  padding: var(--spacing);
}

@media (min-width: 350px) {
  main {
    --spacing: 16px;
  }
}

@media (min-width: 500px) {
  main {
    --spacing: 32px;
  }
}

/* josh's solution */

/* stacked cards */

/* Color Theme */

/* Josh Solution */

:root {
  --opacity-low: 0.3;
  --opacity-medium: 0.5;
  --opacity-high: 0.7;
  --gray: 270deg;
  --primary: 245deg;
  --secondary: 350deg;
  --intense-low: 90% 50%;
  --intense-higher: 95% 50%;
  --low-sat: 90%;
  --higher-sat: 95%;
  --low-light: 30%;
  --higher-light: 70%;
  --color-gray-100: hsl(var(--gray) 20% 95%);
  --color-gray-300: hsl(var(--gray) 10% 75%);
  --color-gray-500: hsl(var(--gray) 5% 50%);
  --color-gray-700: hsl(var(--gray) 10% 30%);
  --color-gray-900: hsl(var(--gray) 15% 15%);

  --color-primary: hsl(var(--primary) var(--intense-low));
  --color-primary-light: hsl(var(--primary) var(--low-sat) var(--higher-light));
  --color-primary-dark: hsl(var(--primary) var(--low-sat) var(--low-light));
  --color-primary-alpha-300: hsl(
    var(--primary) var(--intense-low) / var(--opacity-low)
  );
  --color-primary-alpha-500: hsl(
    var(--primary) var(--intense-low) / var(--opacity-medium)
  );
  --color-primary-alpha-700: hsl(
    var(--primary) var(--intense-low) / var(--opacity-high)
  );

  --color-secondary: hsl(var(--secondary) var(--intense-higher));
  --color-secondary-light: hsl(
    var(--secondary) var(--higher-sat) var(--higher-light)
  );
  --color-secondary-dark: hsl(
    var(--secondary) var(--higher-sat) var(--low-light)
  );
  --color-secondary-alpha-300: hsl(
    var(--secondary) var(--intense-higher) / var(--opacity-low)
  );
  --color-secondary-alpha-500: hsl(
    var(--secondary) var(--intense-higher) / var(--opacity-medium)
  );
  --color-secondary-alpha-700: hsl(
    var(--secondary) var(--intense-higher) / var(--opacity-high)
  );
}

main {
  border: solid black;
  padding: 8px;
}
.row {
  display: flex;
  padding: 8px 0px;
  gap: 8px;
}
.row.with-bg {
  padding: 8px;
  background-image: url("/course-materials/nasa-earth-shot.jpg");
  background-size: cover;
  background-position: center center;
}

.demo-box {
  width: 50px;
  height: 50px;
  border-radius: 4px;
}

/*
  The code below is very repetitive, but you don't
  have to worry about it. In a modern JS app, we'd
  probably generate these classes automatically!
*/
.bg-gray-100 {
  background: var(--color-gray-100);
}
.bg-gray-300 {
  background: var(--color-gray-300);
}
.bg-gray-500 {
  background: var(--color-gray-500);
}
.bg-gray-700 {
  background: var(--color-gray-700);
}
.bg-gray-900 {
  background: var(--color-gray-900);
}
.bg-primary {
  background: var(--color-primary);
}
.bg-primary-light {
  background: var(--color-primary-light);
}
.bg-primary-dark {
  background: var(--color-primary-dark);
}
.bg-primary-alpha-700 {
  background: var(--color-primary-alpha-700);
}
.bg-primary-alpha-500 {
  background: var(--color-primary-alpha-500);
}
.bg-primary-alpha-300 {
  background: var(--color-primary-alpha-300);
}
.bg-secondary {
  background: var(--color-secondary);
}
.bg-secondary-light {
  background: var(--color-secondary-light);
}
.bg-secondary-dark {
  background: var(--color-secondary-dark);
}
.bg-secondary-alpha-700 {
  background: var(--color-secondary-alpha-700);
}
.bg-secondary-alpha-500 {
  background: var(--color-secondary-alpha-500);
}
.bg-secondary-alpha-300 {
  background: var(--color-secondary-alpha-300);
}

/* Josh Solution */

/* Color Theme */

/* dark mode */

:root {
  --dark-mode-bg: 5%;
  --dark-mode-fg: 100%;
  --light-mode-bg: 90%;
  --light-mode-fg: 20%;
}

@media (prefers-color-scheme: dark) {
  body {
    background: hsl(250deg 10% var(--dark-mode-bg));
    color: hsl(250deg 20% var(--dark-mode-fg));
  }

  a {
    color: hsl(250deg 100% 50%);
    text-decoration: none;
  }
}

@media (prefers-color-scheme: light) {
  body {
    background: hsl(250deg 10% var(--light-mode-bg));
    color: hsl(250deg 20% var(--light-mode-fg));
  }

  a {
    color: hsl(250deg 100% 50%);
    text-decoration: none;
  }
}

/* josh's solution */

html {
  --color-bg: hsl(250deg 10% 90%);
  --color-fg: hsl(250deg 20% 20%);
  --color-primary: hsl(250deg 100% 50%);
}

body {
  background: var(--color-bg);
  color: var(--color-fg);
}

a {
  color: var(--color-primary);
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    --color-bg: hsl(250deg 10% 5%);
    --color-fg: hsl(250deg 20% 100%);
    --color-primary: hsl(250deg 100% 50%);
  }
}
/* josh's solution */

/* dark mode */

/* art project */

html {
  --box-size: 75px;
}

.box {
  width: var(--box-size);
  height: var(--box-size);
  /*
    Here's a quick example, to get you started!
    We use “--index”, a number from 1 to 16,
    to derive the “hue” for each square.
    
    If you're not sure where to start,
    try tweaking these numbers!
    
    One last tip: using a gradient instead
    of a solid color opens lots of exciting
    possibilities!
  */
  background: hsl(calc(var(--index) * -7deg) 100% 50%);
  background-image: linear-gradient(
    calc(var(--deg) - 2deg),
    hsl(calc(var(--index) * -7deg) 100% 50%),
    hsl(calc(var(--index) * 50deg) 100% 50%)
  );
}

.row {
  display: flex;
  flex-wrap: wrap;
  width: calc(var(--box-size) * 4);
  height: calc(var(--box-size) * 4);
}

/*
  Attach a unique index to each box.
  Normally, we would do this in JS.
*/
.box:nth-of-type(1) {
  --index: 1;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(2) {
  --index: 2;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(3) {
  --index: 3;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(4) {
  --index: 4;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(5) {
  --index: 5;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(6) {
  --index: 6;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(7) {
  --index: 7;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(8) {
  --index: 8;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(9) {
  --index: 9;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(10) {
  --index: 10;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(11) {
  --index: 11;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(12) {
  --index: 12;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(13) {
  --index: 13;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(14) {
  --index: 14;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(15) {
  --index: 15;
  --deg: 15deg;
  --color-deg: 5deg;
  border-radius: 50%;
}
.box:nth-of-type(16) {
  --index: 16;
  --deg: 15deg;
  --color-deg: 5deg;
}
* {
  box-sizing: border-box;
}

/* art project */

html {
  --box-size: 100px;
}

.box {
  width: var(--box-size);
  height: var(--box-size);
  /*
    Here's a quick example, to get you started!
    We use “--index”, a number from 1 to 16,
    to derive the “hue” for each square.
    
    If you're not sure where to start,
    try tweaking these numbers!
    
    One last tip: using a gradient instead
    of a solid color opens lots of exciting
    possibilities!
  */
  background-image: linear-gradient(
    var(--deg, 45deg),
    hsl(calc(var(--index) * var(--color-deg)) 100% 50%),
    hsl(calc(var(--index) * 50deg) 100% 50%)
  );
}

.row {
  display: flex;
  flex-wrap: wrap;
  width: calc(var(--box-size) * 5);
  height: calc(var(--box-size) * 4);
}

/*
  Attach a unique index to each box.
  Normally, we would do this in JS.
*/
.box:nth-of-type(1) {
  --index: 1;
  --deg: 15deg;
  --color-deg: 5deg;
}
.box:nth-of-type(2) {
  --index: 2;
  --deg: 15deg;
  --color-deg: 8deg;
  border-radius: 50%;
}
.box:nth-of-type(3) {
  --index: 3;
  --deg: 15deg;
  --color-deg: 18deg;
}
.box:nth-of-type(4) {
  --index: 4;
  --deg: 15deg;
  --color-deg: 28deg;
}
.box:nth-of-type(5) {
  --index: 5;
  --deg: 15deg;
  --color-deg: 35deg;
}
.box:nth-of-type(6) {
  --index: 6;
  --deg: 15deg;
  --color-deg: 55deg;
  border-radius: 50%;
}
.box:nth-of-type(7) {
  --index: 7;
  --deg: 15deg;
  --color-deg: 10deg;
}
.box:nth-of-type(8) {
  --index: 8;
  --deg: 15deg;
  --color-deg: 90deg;
  border-radius: 50%;
}
.box:nth-of-type(9) {
  --index: 9;
  --deg: 15deg;
  --color-deg: 70deg;
}
.box:nth-of-type(10) {
  --index: 10;
  --deg: 15deg;
  --color-deg: 75deg;
}
.box:nth-of-type(11) {
  --index: 11;
  --deg: 15deg;
  --color-deg: 115deg;
  border-radius: 50%;
}
.box:nth-of-type(12) {
  --index: 12;
  --deg: 15deg;
  --color-deg: 135deg;
}
.box:nth-of-type(13) {
  --index: 13;
  --deg: 15deg;
  --color-deg: 145deg;
  border-radius: 50%;
}
.box:nth-of-type(14) {
  --index: 14;
  --deg: 15deg;
  --color-deg: 190deg;
}
.box:nth-of-type(15) {
  --index: 15;
  --deg: 15deg;
  --color-deg: 200deg;
  border-radius: 50%;
}
.box:nth-of-type(16) {
  --index: 16;
  --deg: 15deg;
  --color-deg: 210deg;
}
* {
  box-sizing: border-box;
}

/* Max-height hero */

html,
body {
  height: 100%;
}

.hero {
  /* Change me: */
  height: clamp(500px, 80vh, min-content);
  max-height: 100%;
}

/* josh's solution */

.hero {
  min-height: min(80vh, 500px);
}

/* josh's solution */

/* Max-height hero */

/* fluid heading */

h2 {
  font-size: clamp(1.5rem, 8vw - 2rem, 3rem);
}

/* fluid heading */

/* fluid spacing */

ul {
  display: flex;
  gap: clamp(1rem, 13vw - 2.5rem, 5rem);
}

/* Additional challenges
If you'd like more practice using this calculator, here are some additional values to try and match:

we find the slope that is the difference between the minimum and maximum px
Minimum 2rem at 400px, Maximum 4.5rem at 1400px
Minimum 3rem at 800px, Maximum 4rem at 1600px
Minimum 2rem at 1000px, Maximum 4rem at ~1535px */
/* fluid spacing */

/* Minimum 2rem at 400px, Maximum 4.5rem at 1400px */
ul {
  display: flex;
  gap: clamp(2rem, 4vw + 1rem, 4.5rem);
}

/* Minimum 3rem at 800px, Maximum 4rem at 1600px */
ul {
  display: flex;
  gap: clamp(3rem, 2vw + 2rem, 4rem);
}

/* Minimum 2rem at 1000px, Maximum 4rem at ~1535px */

ul {
  display: flex;
  gap: clamp(2rem, 6vw - 1.75rem, 4rem);
}
