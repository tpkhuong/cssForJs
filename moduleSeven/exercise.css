/*
Design guidelines:

• The first column should be 200px wide,
  the second column should be flexible.
• Similarly, The first row should be
  200px tall, the second flexible.
• The gap between columns should be 16px.
• The gap between rows should be 32px.
• You can use the blue/yellow/red/white
  design tokens, defined on the “.wrapper”
  element.
*/

html,
body {
  height: 100%;
}
body {
  background: hsl(0deg 0% 2%);
  padding: 0;
  margin: 0;
}

.wrapper {
  --blue: hsl(250deg 100% 55%);
  --yellow: hsl(50deg 100% 50%);
  --red: hsl(350deg 100% 45%);
  --white: hsl(0deg 0% 100%);

  display: grid;
  grid-template-columns: 200px 1fr;
  grid-template-rows: 200px 1fr;
  gap: 32px 16px;
  min-height: 100%;
}

.blue-box {
  background-color: var(--blue);
}

header {
  background-color: var(--yellow);
  display: flex;
  justify-content: flex-end;
  align-items: flex-end;
  padding-block-end: 8px;
  padding-inline-end: 16px;
}

/* if we didn't want to use justify-content and align-items. we can use declarations below */

h1 {
  margin-inline-start: auto;
  margin-block-start: auto;
}

.red-box {
  background-color: var(--red);
}

main {
  background-color: var(--white);
}

/* Diagonals */

.wrapper {
  display: grid;
  grid-template-rows: repeat(3, 1fr);
  min-height: 100%;
}

.box {
  width: 50%;
}

.box.one {
  background-color: pink;
  justify-self: end;
}
.box.two {
  background-color: lavender;
  justify-self: center;
}
.box.three {
  background-color: peachpuff;
  justify-self: start;
}

html,
body {
  height: 100%;
}

/* Broken Rectangles */

.wrapper {
  --rect-width: 100px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  min-height: 100%;
  gap: 0px 8px;
}

.box {
  width: var(--rect-width);
  height: 80px;
}

.box.one {
  background-color: pink;
  justify-self: end;
  --rect-width: 25px;
}
.box.two {
  background-color: pink;
  --rect-width: 75px;
}
.box.three {
  background-color: lavender;
  justify-self: end;
  --rect-width: 50px;
}
.box.four {
  background-color: lavender;
  --rect-width: 50px;
}
.box.five {
  background-color: honeydew;
  justify-self: end;
  --rect-width: 75px;
}
.box.six {
  background-color: honeydew;
  --rect-width: 25px;
}

html,
body {
  height: 100%;
}

/* josh's solution */

.wrapper {
  --rect-width: 100px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  align-content: center;
  gap: 4px;
  min-height: 100%;
}
.box:nth-of-type(odd) {
  justify-self: end;
}
.box {
  width: var(--rect-width);
  height: 80px;
}
.box.one {
  background-color: pink;
  width: calc(var(--rect-width) * 0.25);
}
.box.two {
  background-color: pink;
  width: calc(var(--rect-width) * 0.75);
}
.box.three {
  background-color: lavender;
  width: calc(var(--rect-width) * 0.5);
}
.box.four {
  background-color: lavender;
  width: calc(var(--rect-width) * 0.5);
}
.box.five {
  background-color: honeydew;
  width: calc(var(--rect-width) * 0.75);
}
.box.six {
  background-color: honeydew;
  width: calc(var(--rect-width) * 0.25);
}
html,
body {
  height: 100%;
}

/* Holy Grail */

html,
body {
  height: 100%;
}

.grid-wrapper {
  min-height: 100%;
  display: grid;
  grid-template-columns: 200px 1fr 150px;
  grid-template-rows: 4rem 1fr 5rem;
  grid-template-areas:
    "header header header"
    "nav main sidebar"
    "footer footer footer";
}

.header {
  grid-area: header;
  /* background-color: lightyellow; */
}

.navigation {
  grid-area: nav;
  /* background-color: lightgreen; */
}

.main-content {
  grid-area: main;
  /* background-color: lightblue; */
}

.sidebar {
  grid-area: sidebar;
  /* background-color: lightseagreen; */
}

.footer {
  grid-area: footer;
  /* background-color: lightcoral; */
}

/* josh's solution */

.wrapper {
  display: grid;
  grid-template-columns: 200px 1fr 150px;
  grid-template-rows: 4rem 1fr 5rem;
  grid-template-areas:
    "header header header"
    "sidebar main ad"
    "footer footer footer";
  min-height: 100%;
}
header {
  grid-area: header;
}
nav {
  grid-area: sidebar;
}
main {
  grid-area: main;
}
aside {
  grid-area: ad;
}
footer {
  grid-area: footer;
}

/* World-Famous Grid Snippet */
/* <!--
• 320px minimum column width
• 16px gap
• No overflow on smaller screens
--> */
.grid {
  --min-column-width: min(320px, 100%);
  display: grid;
  padding: 16px;
  grid-template-columns: repeat(
    auto-fill,
    minmax(var(--min-column-width), 1fr)
  );
  gap: 16px;
}

/* josh's solution */
