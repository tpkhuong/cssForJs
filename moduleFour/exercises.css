.flex-Wrapper {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: flex-end;
  height: 100%;
}

.sent {
  align-self: flex-end;
}

.received {
}

/* exercise sidebar */

.wrapper {
  display: flex;
}

nav {
  width: 220px;
}

nav,
main {
  padding: 16px;
  border: 2px solid;
}

main {
  flex-grow: 1;
}

/* exercise sidebar */

/* exercise cat */

/* flex: grow(1) shrink(1) basis(0px) */
/* 
flex-grow: 0;
flex-shrink: 1;
flex-basis: auto;
*/

.wrapper {
  display: flex;
}

img {
  width: 100%;
  display: block;
  height: auto;
}

.img-wrapper {
}
article {
  flex: 1;
}

article {
  margin: 8px;
  border-radius: 16px;
  box-shadow: 0px 2px 24px hsl(0deg 0% 0% / 0.2);
  display: flex;
  flex-direction: column;
  align-items: ;
}
article img {
  border-radius: 12px 12px 0px 0px;
}
article section {
  padding: 8px 16px 16px;
}
article h2 {
  margin-bottom: 8px;
}
article p {
  font-weight: 300;
}

/* exercise cat */

/* constraints */

.wrapper {
  display: flex;
}
.biggie {
  flex: 2;
  /* max-width with flex box, the element won't get larger than 75px, it can shrink if flex-shrink is set to 1*/
  max-width: 75px;
}
.tiny {
  flex: 1;
  /* min-width with flex box, min-width the element won't get smaller than 75px but it can grow if flex-grow is set to 1*/
  min-width: 75px;
}

/* constraints */

/* Items should be horizontally centered
The nav should be 1/3rd of the total space, but no more than 150px
The main content should max out at 500px */

/* exercise sidebar constraints */

nav {
  max-width: 150px;
  flex: 1;
}

main {
  flex: 2;
  max-width: 500px;
}

/* exercise sidebar constraints */

/* exercise facebook layout */

.wrapper {
  display: flex;
}
nav,
aside.contacts {
  min-width: 150px;
  max-width: 250px;
  flex: 1;
}
main {
  flex: 2;
}

@media (max-width: 700px) {
  nav {
    display: none;
  }
}

/* josh's solution */

.wrapper {
  display: flex;
}
nav,
aside.contacts {
  min-width: 150px;
  max-width: 250px;
  flex-shrink: 9999999;
  flex-basis: 250px;
}
main {
  flex: 1;
  flex-basis: 500px;
}

/* shorthand */

.wrapper {
  display: flex;
}
nav,
aside.contacts {
  min-width: 150px;
  max-width: 250px;
  flex: 0 999999 250px;
}
main {
  flex: 1 1 500px;
}

/* shorthand */

/* josh's solution */

/* exercise facebook layout */

/* exercise deconstructed pancake */

main {
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
}

article {
  flex: 0 1 150px;
  /* max-width: 350px; */
}

article {
  margin: 8px;
  border-radius: 16px;
  background-color: hsl(240deg 90% 90%);
  border: 2px solid hsl(240deg 80% 60%);
  height: 200px;
}
article:first-child {
  background-color: hsl(335deg 90% 90%);
  border-color: hsl(335deg 80% 60%);
}
article:last-child {
  background-color: hsl(45deg 90% 90%);
  border-color: hsl(45deg 80% 60%);
  margin-inline: auto;
}

/* exercise deconstructed pancake */

/* exercise superheader */

header {
  display: flex;
  gap: 8px;
}

.margin-right-8px {
  margin-inline-end: 8px;
}
.margin-left {
  margin-inline-start: auto;
}

/* exercise superheader */

/* exercise photo viewer */

.photo-viewer {
  display: flex;
  gap: 16px;
}
.photo-roll {
  display: flex;
  flex-flow: column;
  /* we can set a width or flex: 0 0 flex-basis on this element instead of setting a widht on the img containers */
  gap: 16px;
}
img {
  width: 100%;
}
.clickable-photo {
  width: 250px;
}

.photo-roll {
  flex-shrink: 0;
}

.main-photo {
  flex: 1 1;
  max-width: 800px;
  line-height: 0px;
}

.actions {
  display: flex;
  margin-block-start: auto;
}

.actions button:first-child {
  margin-right: auto;
}

/* exercise photo viewer */

/* table of content */

.wrapper {
  display: flex;
}
main {
  flex: 1;
}
aside {
  min-width: 200px;
}

/* table of content */

/* combining layout modes */

section {
  display: flex;
  gap: 32px;
  border: 3px solid hotpink;
}

.col {
  flex: 1;
  padding: 16px;
  position: absolute;
  flex-direction: column;
}

/* josh solution */

section {
  display: flex;
  gap: 32px;
  border: 3px solid deeppink;
  overflow: auto;
}

.col {
  flex: 1;
  padding: 16px;
}

.col:first-of-type {
  /* we had sticky on the second .col */
  position: sticky;
  top: 0;
}

.col:last-of-type {
  height: 0px;
}

/* josh solution */

/* combining layout modes */

/* holy grail layout */

html,
body {
  height: 100%;
}

.wrapper {
  display: flex;
  flex-flow: column;
  min-height: 100%;
}

.middle {
  display: flex;
  flex: 1;
}

.middle .box {
  flex: 1 1 150px;
}

.box:nth-child(2) {
  flex: 2 1 400px;
}

/* or */

html,
body {
  height: 100%;
}
.wrapper {
  display: flex;
  flex-flow: column;
  min-height: 100%;
}

.middle {
  display: flex;
  flex: 1;
}

nav,
aside {
  flex: 1;
}

.middle .box:nth-child(2) {
  flex: 3;
}

/* holy grail layout */

/* sticky sidebar */

.wrapper {
  display: flex;
  /* use align-items: flex-start. better to use align-self on the element we declared the declaration of position: sticky */
}

nav {
  /* no wiggle room because the default value for align-items in a flexbox container is stretch. There will be no room for it to stick.
  position: sticky will stick depending on its parent.
  */
  position: sticky;
  top: 0;
  height: 0px;
}

main {
  flex: 1;
}

/* sticky sidebar */

/* overstuffed and centered */

.wrapper {
  width: 50vw;
}
img {
  display: block;
  width: 300px;
  margin-top: 16px;
}

/* overstuffed and centered */
